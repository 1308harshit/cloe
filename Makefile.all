# Makefile.all
#
# This file defines all packages available for building and defines their
# dependencies, so that make can build them in parallel effectively.
#

# Make configuration:
SHELL := /bin/bash
GNUMAKEFLAGS := --no-print-directory
SUBMAKEFLAGS :=

## USE_NPROC
##   Usage: make USE_NPROC=1 <targets>
##   Default: 0
##
##   If set to 1, this will force $(nproc) number of package builds at a
##   time, taking dependencies into account. This provides up to a ~50%
##   speed-up, but makes reading error messages more difficult.
##
##   You can override the number of jobs by also setting NPROC. For example:
##
##       make USE_NPROC=1 NPROC=3 <targets>
##
USE_NPROC := 0
ifeq (${USE_NPROC},1)
NPROC := $(shell nproc 2>/dev/null)
ifdef NPROC
SUBMAKEFLAGS += -j${NPROC}
endif
endif

## VENDOR_ONLY
##   Usage: make VENDOR_ONLY=1 export
##   Default: 0
##
##   This is somewhat of a misleading option, since it may imply that vendor
##   packages are normally selected, which they are not. This is mainly useful
##   for exporting the vendor recipes should they not already be available
##   through an Artifactory or Conan server.
##
VENDOR_ONLY := 0

## RECURSIVE
##   Usage: make RECURSIVE=1 SELECT_PKGS="pkg1 ..." <targets>
##   Default: 0
##
##   If set to 1, you can specify with SELECT_PKG a single package, but the
##   dependencies will also be included. This allows us to do the following:
##
##       make RECURSIVE=1 SELECT_PKGS="engine" purge editable clean all
##
##   This command would then build engine with all its dependencies in-source,
##   which is useful when making changes to, say fable and engine at the same
##   time.
##
##   Note that this bypasses UNSELECT_PGKS, which is why it is off by default.
##
RECURSIVE := 0

## UNSELECT_PKGS
##   Usage: make UNSELECT_PKGS="pkg1 pkg2 ..." <targets>
##   Default: ""
##
##   This variable contains packages that should be unselected for the action.
##   This should only be provided from the command line, for example:
##
##       make UNSELECT_PKGS="plugins/vtd plugins/demo_printer" package
##
##   Note that if RECURSIVE=1, then it is not possible to unselect packages
##   that are depended upon by selected packages.
##
UNSELECT_PKGS :=

## SELECT_PKGS
##   Usage: make SELECT_PKGS="pkg1 pkg2 ..." <targets>
##   Default: ""
##
##   This can be used to explicitly set the selected packages. Using this
##   overrides UNSELECT_PKG.
##
SELECT_PKGS :=

## CONAN_OPTIONS
##   Usage: make CONAN_OPTIONS="..."
##   Default: ""
##
##   This variable contains options that are passed on to the following Conan
##   commands:
##
##     conan create
##       for the package and package-outdated targets.
##     conan install
##       for all other targets.
##
##   So see conan create --help and conan install --help for which options
##   are valid in these contexts.
##
CONAN_OPTIONS :=

## WITH_ENGINE
##   Usage: make WITH_ENGINE=0 <targets>
##   Default: 1
##
WITH_ENGINE := 1

## WITH_VTD
##   Usage: make WITH_VTD=0 <targets>
##   Default: 1
##
WITH_VTD := 1

## BUILD_TESTS
##   Usage: make BUILD_TESTS=0 package
##   Default: 1
##
##   If set to 0, all packages that contain tests will not build the test
##   binaries. This exists to let us build an alpine Docker image and also
##   to showcase how to correctly pass options to all packages.
##
BUILD_TESTS := 1

# --------------------------------------------------------------------------- #

# Define all packages with their dependencies:
# - Ensure RECURSIVE=1 works.
# - Ensure USE_NPROC=1 works.
# - Ensure packages are built in correct order.
ALL_VENDOR_PKGS := $(wildcard vendor/*)
ALL_RUNTIME_PKGS := fable runtime models
ALL_ENGINE_PKGS := oak engine
ALL_PLUGIN_PKGS := $(wildcard plugins/*)
ALL_PKGS := ${ALL_RUNTIME_PKGS} ${ALL_ENGINE_PKGS} ${ALL_PLUGIN_PKGS} cloe
.PHONY: ${ALL_VENDOR_PKGS} ${ALL_PKGS}

fable:
runtime: fable
models: runtime
oak: runtime
engine: models oak
${ALL_PLUGIN_PKGS}: runtime models

# Select packages to use:
# - Define recipes only for selected packages.
# - Ensure RECURSIVE=1 works.
# - Ensure CONAN_OPTIONS are correct for cloe metapackage.
# - SELECT_PKGS contains final list of selected packages.
ifeq (${VENDOR_ONLY},1)
ALL_PKGS := ${ALL_VENDOR_PKGS}
endif

ifeq (${RECURSIVE},1)
$(filter-out cloe, ${ALL_PKGS}):
	${MAKE} -C $@ $(shell echo ${MAKECMDGOALS} | sed -re 's/-all//')
endif

ifeq (${WITH_ENGINE},0)
ALL_PKGS := $(filter-out oak, ${ALL_PKGS})
ALL_PKGS := $(filter-out engine, ${ALL_PKGS})
CONAN_OPTIONS += -o cloe:with_engine=False
endif

ifeq (${WITH_VTD},0)
ALL_PKGS := $(filter-out plugins/vtd, ${ALL_PKGS})
CONAN_OPTIONS += -o cloe:with_vtd=False
endif

ifeq (${BUILD_TESTS},0)
CONAN_OPTIONS += -o cloe:test=False
CONAN_OPTIONS += -o fable:test=False
CONAN_OPTIONS += -o cloe-runtime:test=False
CONAN_OPTIONS += -o cloe-models:test=False
CONAN_OPTIONS += -o cloe-oak:test=False
ifeq (${WITH_ENGINE},1)
CONAN_OPTIONS += -o cloe-engine:test=False
endif
ifeq (${WITH_VTD},1)
CONAN_OPTIONS += -o cloe-plugin-vtd:test=False
endif
CONAN_OPTIONS += -o cloe-plugin-basic:test=False
endif

SELECT_PKGS := $(filter-out ${UNSELECT_PKGS}, ${ALL_PKGS})
ifeq (${RECURSIVE},0)
$(filter-out cloe, ${SELECT_PKGS}):
	${MAKE} -C $@ $(shell echo ${MAKECMDGOALS} | sed -re 's/-all//')
endif

define make_rule
help::
	@printf "  % -16s to %s\n" ${1} ${2}

${1}-all: ${SELECT_PKGS}
${1}:
	@printf "________________________________________"
	@printf "________________________________________\n"
	@printf ":: Proceeding to%s\n" "$(shell echo "${2}" | sed -re 's/ +/ /g')"
	${MAKE} ${SUBMAKEFLAGS} ${1}-all
endef

define make_target
$(eval $(call make_rule,${1},${2}))
endef

# Re-define cloe target to use Makefile.package, and only run for targets
# where it makes sense, since "cloe" is a Conan meta-package.
cloe:
	for case in export package package-outdated list purge clean; do \
		if [[ "${MAKECMDGOALS}" == "$${case}-all" ]]; then \
			${MAKE} -f Makefile.package CONAN_OPTIONS="${CONAN_OPTIONS}" $${case}; \
		fi \
	done

.PHONY: help
.DEFAULT: help
.SILENT: help
help::
	echo "Available package targets:"

$(call make_target, export,           "export selected package recipes      [conan-cache]")
$(call make_target, package,          "create selected packages             [conan-cache]")
$(call make_target, package-outdated, "create selected packages if outdated [conan-cache]")
$(call make_target, list,             "list selected package install files  [conan-cache]")
$(call make_target, purge,            "remove selected packages from cache  [conan-cache]")

help::
	echo

$(call make_target, editable,         "instruct Conan to use in-source build for selected packages")
$(call make_target, uneditable,       "instruct Conan to use local cache for selected packages")

help::
	echo

$(call make_target, all,              "build selected packages                [in-source]")
$(call make_target, conan,            "configure Conan and get dependencies   [in-source]")
$(call make_target, configure,        "configure CMake packages               [in-source]")
$(call make_target, test,             "run CMake tests if they are available  [in-source]")
$(call make_target, export-pkg,       "export build artifacts to Conan cache  [in-source]")
$(call make_target, clean,            "remove build artifacts                 [in-source]")

help::
	echo
	echo "  Options:"
	echo "    USE_NPROC=(0|1)     to build $(shell nproc) packages simultaneously (default=0)"
	echo "    RECURSIVE=(0|1)     to recursively select dependent packages (default=0)"
	echo "    VENDOR_ONLY=(0|1)   to only select vendor packages (default=0)"
	echo "    WITH_ENGINE=(0|1)   to build and deploy cloe-engine (default=1)"
	echo "    WITH_VTD=(0|1)      to build and deploy cloe-plugin-vtd (default=1)"
	echo "    BUILD_TESTS=(0|1)   to build and run unit tests (default=1)"
	echo
	echo "  Defines:"
	echo "    CONAN_OPTIONS = ${CONAN_OPTIONS}"
	echo "    UNSELECT_PKGS = ${UNSELECT_PKGS}"
	echo "    SELECT_PKGS   = \\"
	echo "$$(echo "      ${SELECT_PKGS}" | fmt -70)"
	echo
	echo "  Please see Makefile.all for more details and usage tips."
	echo
